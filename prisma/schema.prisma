// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  subscription  String    @default("free")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  documents Document[]
  activities Activity[]
  notifications Notification[]
  comments Comment[]
  collaborators DocumentCollaborator[]
  settings UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id          String   @id @default(cuid())
  title       String
  content     String
  htmlContent String?
  status      String   @default("draft")
  category    String?
  tags        String?  // JSON array as string
  wordCount   Int      @default(0)
  readingTime Int      @default(0)
  version     Int      @default(1)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  author        User                  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  collaborators DocumentCollaborator[]
  comments      Comment[]
  activities    Activity[]
  attachments   Attachment[]
  versions      DocumentVersion[]
}

model DocumentCollaborator {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  role       String   @default("editor") // editor, viewer, admin
  createdAt  DateTime @default(now())

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
}

model DocumentVersion {
  id         String   @id @default(cuid())
  documentId String
  version    Int
  content    String
  htmlContent String?
  createdAt  DateTime @default(now())
  createdBy  String

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, version])
}

model Comment {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  content    String
  resolved   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  parentId   String?

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
}

model Attachment {
  id         String   @id @default(cuid())
  documentId String
  name       String
  type       String
  size       Int
  url        String
  thumbnail  String?
  createdAt  DateTime @default(now())

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // create, edit, delete, share, comment, export
  description String
  userId      String
  documentId  String?
  metadata    String?  // JSON object as string
  createdAt   DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // info, success, warning, error
  title     String
  message   String
  userId    String
  read      Boolean  @default(false)
  actionUrl String?
  actionLabel String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  content     String
  thumbnail   String?
  tags        String?  // JSON array as string
  author      String
  downloads   Int      @default(0)
  rating      Float    @default(0)
  premium     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserSettings {
  id     String @id @default(cuid())
  userId String @unique
  settings String // JSON object as string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
